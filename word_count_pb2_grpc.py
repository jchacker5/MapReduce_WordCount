# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import word_count_pb2 as word__count__pb2


class MasterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartJob = channel.unary_unary(
                '/wordcount.Master/StartJob',
                request_serializer=word__count__pb2.StartJobRequest.SerializeToString,
                response_deserializer=word__count__pb2.StartJobResponse.FromString,
                )


class MasterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartJob': grpc.unary_unary_rpc_method_handler(
                    servicer.StartJob,
                    request_deserializer=word__count__pb2.StartJobRequest.FromString,
                    response_serializer=word__count__pb2.StartJobResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wordcount.Master', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Master(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wordcount.Master/StartJob',
            word__count__pb2.StartJobRequest.SerializeToString,
            word__count__pb2.StartJobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MapManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMapTask = channel.unary_unary(
                '/wordcount.MapManager/CreateMapTask',
                request_serializer=word__count__pb2.CreateMapTaskRequest.SerializeToString,
                response_deserializer=word__count__pb2.CreateMapTaskResponse.FromString,
                )


class MapManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateMapTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMapTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMapTask,
                    request_deserializer=word__count__pb2.CreateMapTaskRequest.FromString,
                    response_serializer=word__count__pb2.CreateMapTaskResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wordcount.MapManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MapManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateMapTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wordcount.MapManager/CreateMapTask',
            word__count__pb2.CreateMapTaskRequest.SerializeToString,
            word__count__pb2.CreateMapTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReduceManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOrCreateReducerTask = channel.unary_unary(
                '/wordcount.ReduceManager/GetOrCreateReducerTask',
                request_serializer=word__count__pb2.GetOrCreateReducerTaskRequest.SerializeToString,
                response_deserializer=word__count__pb2.GetOrCreateReducerTaskResponse.FromString,
                )


class ReduceManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetOrCreateReducerTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReduceManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOrCreateReducerTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrCreateReducerTask,
                    request_deserializer=word__count__pb2.GetOrCreateReducerTaskRequest.FromString,
                    response_serializer=word__count__pb2.GetOrCreateReducerTaskResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wordcount.ReduceManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReduceManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetOrCreateReducerTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wordcount.ReduceManager/GetOrCreateReducerTask',
            word__count__pb2.GetOrCreateReducerTaskRequest.SerializeToString,
            word__count__pb2.GetOrCreateReducerTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
